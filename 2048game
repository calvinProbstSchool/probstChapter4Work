# Minesweeper
# By Calvin Probst calvin.probst@gmail.com
# https://github.com/calvinProbstSchool/probstChapter3work
# 32, 4

import random
import pygame
import sys
import math
from pygame.locals import *

FPS = 30
ROWSIZE = 4
NEWNUMBERS = (2, 4)
WINNINGNUMBER = 2048
BOXSIZE = 100
GAPSIZE = 30
TEXTGAP = 100
WINDOWSIZE = GAPSIZE + (GAPSIZE + BOXSIZE) * BOXSIZE + 2 * TEXTGAP
BOARDSIZE = GAPSIZE + (GAPSIZE + BOXSIZE) * BOXSIZE

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
BRIGHTBLUE = (0, 50, 255)
DARKTURQUOISE = (3, 54, 73)
GREEN = (0, 204, 0)

BGCOLOR = DARKTURQUOISE
BOARDBGCOLOR = BLACK
BOXCOLOR1 = BRIGHTBLUE
BOXCOLOR2 = GREEN
TEXTCOLOR = BLACK
SCORETEXT = WHITE

def main():
    global DISPLAYSURF, FPSCLOCK, BOXFONT, SCOREFONT
    pygame.init()
    pygame.mixer_music.load("Alcazar.mp3")
    pygame.mixer_music.play(-1, 0.0)
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
    BOXFONT = pygame.font.SysFont("3Dventure.ttf", 60)


    mousex = 0
    mousey = 0

    board = []
    for x in range(ROWSIZE):
        row = []
        for y in range(ROWSIZE):
            row.append([0])
        board.append(row)

    playingGame = True

    while True:
        drawGameBoard()
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == MOUSEMOTION:
                mousex, mousey = event.pos
            elif event.type == MOUSEBUTTONUP:
                mousex, mousey = event.pos


def drawGameBoard(board, score, highscore):
    for x in range(ROWSIZE):
        for y in range(ROWSIZE):
            drawTile(board[x][y], boardToCoord(x), boardToCoord(y))
    BOXFONT.render_to(DISPLAYSURF, (WINDOWSIZE / 3, TEXTGAP / 2), "Score:" + str(score), True, BLACK)
    BOXFONT.render_to(DISPLAYSURF, (WINDOWSIZE * 2 / 3, TEXTGAP / 2), "Highscore: " + str(highscore), True, BLACK)


def drawBoardBase():
    pygame.draw.rect(DISPLAYSURF, BOARDBGCOLOR, ((TEXTGAP, TEXTGAP, BOARDSIZE, BOARDSIZE)))


def drawTile(tile, x, y):
    pygame.draw.rect(DISPLAYSURF, getColorValue(tile), (x, y, BOXSIZE, BOXSIZE))
    BOXFONT.render_to(DISPLAYSURF, (boardtoCenterCoord(x), boardtoCenterCoord(y)), str(tile), True, BLACK)



def getColorValue(tileValue):
    step = math.log(tileValue, 2) - 1
    colorR = BOXCOLOR1[0] + int(step * ((BOXCOLOR2[0] - BOXCOLOR1[0]) / 10 ))
    colorG = BOXCOLOR1[1] + int(step * ((BOXCOLOR2[1] - BOXCOLOR1[1]) / 10 ))
    colorB = BOXCOLOR1[2] + int(step * ((BOXCOLOR2[2] - BOXCOLOR1[2]) / 10))
    colorFinal = (colorR, colorB, colorG)
    return (colorFinal)


def boardToCoord(num):
    return TEXTGAP + GAPSIZE + num * (GAPSIZE + BOXSIZE)


def boardtoCenterCoord(num):
    return boardToCoord(num) + BOXSIZE / 2


def coordToBoard(num):
    if num < GAPSIZE + TEXTGAP:
        return -1
    overlap = (num - GAPSIZE - TEXTGAP) % (BOXSIZE + GAPSIZE)
    if overlap > BOXSIZE:
        return -1
    else:
        return (num - overlap - GAPSIZE - TEXTGAP) / (BOXSIZE + GAPSIZE)


def newTile(board):
    tileProb = random.randint(1, 10)
    if tileProb == 1:
        tileVal = 4
    else:
        tileVal = 2
    placed = False
    while not placed:
        posX = random.randint(0, ROWSIZE - 1)
        posY = random.randint(0, ROWSIZE - 1)
        if board[posX][posY] == 0:
            board[posX][posY] = tileVal
            placed = True
    return board